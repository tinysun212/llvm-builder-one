version: 1.0.{build}

image: Visual Studio 2017

environment:
  matrix:
  - PLATFORM: x64

install:
  # Set Environment Variables
  - SET PATH_ORIGINAL=%PATH%
  - SET WORK_DIR=c:\projects
  - CD %WORK_DIR%
  
  # Install packages
  - choco install -y ninja
  - choco install -y wget
  
  # Download source
  - CD %WORK_DIR%
  # llvm source
  - wget -q -O llvm_src.tar.gz https://github.com/tinysun212/swift-llvm/archive/swift-windows-4.0-branch.tar.gz
  # Extract gz and then extract tar in silent mode(-bd -bso0)
  - 7z x llvm_src.tar.gz -so | 7z x -si -ttar -bd -bso0
  - MOVE pax_global_header llvm_commit_id
  - MOVE swift-llvm-swift-windows-4.0-branch llvm
  # clang source
  - wget -q -O clang_src.tar.gz https://github.com/tinysun212/swift-clang/archive/swift-windows-4.0-branch.tar.gz
  - 7z x clang_src.tar.gz -so | 7z x -si -ttar -bd -bso0
  - MOVE pax_global_header clang_commit_id
  - MOVE swift-clang-swift-windows-4.0-branch clang
  # link clang into llvm
  - CD %WORK_DIR%/llvm/tools
  - MKLINK /D clang ..\..\clang
  
build_script:
  # Build clang
  - MKDIR %WORK_DIR%\build\NinjaMSVC\llvm
  - CD %WORK_DIR%/build/NinjaMSVC/llvm
  - CALL "C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat"
  - cmake -G "Ninja" -DCMAKE_C_COMPILER=clang-cl -DCMAKE_CXX_COMPILER=clang-cl -DCMAKE_BUILD_TYPE=RELEASE -DCMAKE_CXX_FLAGS="-DLLVM_ENABLE_DUMP" ..\..\..\llvm
  # We do not compile all of them because it takes longer than an hour which is allowed by free appveyor account.
  # Remainder will be compiled in the llvm-builder.
  - ninja lib/clangAnalysis.lib lib/clangAPINotes.lib lib/clangARCMigrate.lib lib/clangAST.lib lib/clangASTMatchers.lib
    lib/clangBasic.lib lib/clangCodeGen.lib lib/clangDriver.lib lib/clangEdit.lib lib/clangFormat.lib
    lib/clangFrontend.lib lib/clangFrontendTool.lib lib/clangIndex.lib lib/clangLex.lib lib/clangParse.lib lib/clangRewrite.lib
    lib/clangRewriteFrontend.lib lib/clangSema.lib lib/clangSerialization.lib lib/clangStaticAnalyzerCheckers.lib
    lib/clangStaticAnalyzerCore.lib lib/clangStaticAnalyzerFrontend.lib lib/clangToolingCore.lib lib/LLVMAArch64AsmParser.lib
    lib/LLVMAArch64AsmPrinter.lib lib/LLVMAArch64CodeGen.lib lib/LLVMAArch64Desc.lib lib/LLVMAArch64Disassembler.lib
    lib/LLVMAArch64Info.lib lib/LLVMAArch64Utils.lib lib/LLVMAnalysis.lib lib/LLVMARMAsmParser.lib lib/LLVMARMAsmPrinter.lib
    lib/LLVMARMCodeGen.lib lib/LLVMARMDesc.lib lib/LLVMARMDisassembler.lib lib/LLVMARMInfo.lib lib/LLVMAsmParser.lib lib/LLVMAsmPrinter.lib
    lib/LLVMBitReader.lib lib/LLVMBitWriter.lib lib/LLVMCodeGen.lib lib/LLVMCore.lib lib/LLVMCoroutines.lib
  
after_build:
  - 7z a -so -ttar -r dummy *.obj *.lib *.inc *.tmp *.res *.manifest 
                            include bin/clang-tblgen.exe bin/llvm-tblgen.exe .ninja_deps .ninja_log |
    7z a -si -tgzip -bd -bso0 swift_llvm_cache.tar.gz
  - MOVE swift_llvm_cache.tar.gz %APPVEYOR_BUILD_FOLDER%

test_script:
  - ECHO skip test
  
artifacts:
  - path: swift_llvm_cache.tar.gz
    name: Swift-LLVM Cache
